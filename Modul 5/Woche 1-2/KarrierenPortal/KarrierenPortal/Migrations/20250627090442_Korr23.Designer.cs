// <auto-generated />
using System;
using KarrierenPortal.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KarrierenPortal.Migrations
{
    [DbContext(typeof(KarrierePortalDbContext))]
    [Migration("20250627090442_Korr23")]
    partial class Korr23
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BewerberSkill", b =>
                {
                    b.Property<int>("BewerberId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("BewerberId", "SkillId")
                        .HasName("PK_Table_1");

                    b.HasIndex("SkillId");

                    b.ToTable("BewerberSkill", (string)null);
                });

            modelBuilder.Entity("JobAngebotSkill", b =>
                {
                    b.Property<int>("JobAngebotId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("JobAngebotId", "SkillId")
                        .HasName("PK_Table_1x");

                    b.HasIndex("SkillId");

                    b.ToTable("JobAngebotSkill", (string)null);
                });

            modelBuilder.Entity("KarrierenPortal.Models.Arbeitgeber", b =>
                {
                    b.Property<int>("ArbeitgeberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArbeitgeberId"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("Aktiv")
                        .HasColumnType("bit");

                    b.Property<string>("Ansprechpartner")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Beschreibung")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("BetriebsGroesseId")
                        .HasColumnType("int");

                    b.Property<int>("BrancheId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EMail");

                    b.Property<DateTime>("ErstelltAm")
                        .HasColumnType("datetime");

                    b.Property<string>("LandCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Ort")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Plz")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Telefonnummer")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Webseite")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("ArbeitgeberId");

                    b.HasIndex("BetriebsGroesseId");

                    b.HasIndex("BrancheId");

                    b.HasIndex("LandCode");

                    b.ToTable("Arbeitgeber", (string)null);
                });

            modelBuilder.Entity("KarrierenPortal.Models.ArbeitgeberBenefit", b =>
                {
                    b.Property<int>("ArbeitgeberId")
                        .HasColumnType("int");

                    b.Property<int>("BenefitId")
                        .HasColumnType("int");

                    b.HasKey("ArbeitgeberId", "BenefitId");

                    b.HasIndex("BenefitId");

                    b.ToTable("ArbeitgeberBenefit", (string)null);
                });

            modelBuilder.Entity("KarrierenPortal.Models.Arbeitsort", b =>
                {
                    b.Property<int>("ArbeitsortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArbeitsortId"));

                    b.Property<string>("Beschreibung")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ArbeitsortId");

                    b.ToTable("Arbeitsort", (string)null);
                });

            modelBuilder.Entity("KarrierenPortal.Models.Arbeitszeitmodell", b =>
                {
                    b.Property<int>("ArbeitszeitmodellId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArbeitszeitmodellId"));

                    b.Property<string>("Beschreibung")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ArbeitszeitmodellId");

                    b.ToTable("Arbeitszeitmodell", (string)null);
                });

            modelBuilder.Entity("KarrierenPortal.Models.Benachrichtigung", b =>
                {
                    b.Property<int>("BenachrichtigungId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BenachrichtigungId"));

                    b.Property<int>("BewerberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ErstelltAm")
                        .HasColumnType("datetime");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("BenachrichtigungId");

                    b.HasIndex("BewerberId");

                    b.ToTable("Benachrichtigung", (string)null);
                });

            modelBuilder.Entity("KarrierenPortal.Models.Benefit", b =>
                {
                    b.Property<int>("BenefitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BenefitId"));

                    b.Property<string>("Beschreibung")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BenefitId");

                    b.ToTable("Benefit", (string)null);
                });

            modelBuilder.Entity("KarrierenPortal.Models.BetriebsGroesse", b =>
                {
                    b.Property<int>("BetriebsGroesseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BetriebsGroesseId"));

                    b.Property<string>("Beschreibung")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("BetriebsGroesseId");

                    b.ToTable("BetriebsGroesse", (string)null);
                });

            modelBuilder.Entity("KarrierenPortal.Models.Bewerber", b =>
                {
                    b.Property<int>("BewerberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BewerberId"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("Aktiv")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ErstelltAm")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<DateOnly>("Geburtsdatum")
                        .HasColumnType("date");

                    b.Property<string>("LandCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("Nachname")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Ort")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Plz")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Telefonnummer")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Vorname")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Webseite")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("BewerberId");

                    b.HasIndex("LandCode");

                    b.ToTable("Bewerber", (string)null);
                });

            modelBuilder.Entity("KarrierenPortal.Models.Bewerbung", b =>
                {
                    b.Property<int>("BewerbungId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BewerberId")
                        .HasColumnType("int");

                    b.Property<int>("BewerbungStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ErstelltAm")
                        .HasColumnType("datetime");

                    b.Property<int>("JobAngebotId")
                        .HasColumnType("int");

                    b.Property<string>("Schreiben")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BewerbungId");

                    b.HasIndex("BewerbungStatusId");

                    b.HasIndex(new[] { "JobAngebotId", "BewerbungId" }, "UC_JobAngebot_Bewerbung")
                        .IsUnique();

                    b.ToTable("Bewerbung", (string)null);
                });

            modelBuilder.Entity("KarrierenPortal.Models.BewerbungStatus", b =>
                {
                    b.Property<int>("BewerbungStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BewerbungStatusId"));

                    b.Property<string>("Beschreibung")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("BewerbungStatusId");

                    b.ToTable("BewerbungStatus", (string)null);
                });

            modelBuilder.Entity("KarrierenPortal.Models.Branche", b =>
                {
                    b.Property<int>("BrancheId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrancheId"));

                    b.Property<string>("Beschreibung")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("BrancheId");

                    b.ToTable("Branche", (string)null);
                });

            modelBuilder.Entity("KarrierenPortal.Models.GehaltsSpanne", b =>
                {
                    b.Property<int>("GehaltsSpanneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GehaltsSpanneId"));

                    b.Property<string>("Beschreibung")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("GehaltsSpanneId");

                    b.ToTable("GehaltsSpanne", (string)null);
                });

            modelBuilder.Entity("KarrierenPortal.Models.JobAngebot", b =>
                {
                    b.Property<int>("JobAngebotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobAngebotId"));

                    b.Property<bool>("Aktiv")
                        .HasColumnType("bit");

                    b.Property<int>("ArbeitgeberId")
                        .HasColumnType("int");

                    b.Property<int?>("ArbeitsortId")
                        .HasColumnType("int");

                    b.Property<int?>("ArbeitszeitmodellId")
                        .HasColumnType("int");

                    b.Property<string>("Beschreibung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("Bewerbungsfrist")
                        .HasColumnType("date");

                    b.Property<string>("ErstalltAm")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int?>("GehaltsSpanneId")
                        .HasColumnType("int");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("JobAngebotId");

                    b.HasIndex("ArbeitgeberId");

                    b.HasIndex("ArbeitsortId");

                    b.HasIndex("ArbeitszeitmodellId");

                    b.HasIndex("GehaltsSpanneId");

                    b.ToTable("JobAngebot", (string)null);
                });

            modelBuilder.Entity("KarrierenPortal.Models.Land", b =>
                {
                    b.Property<string>("LandCode")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("LandCode")
                        .HasName("PK_Land_1");

                    b.ToTable("Land", (string)null);
                });

            modelBuilder.Entity("KarrierenPortal.Models.Lebenslauf", b =>
                {
                    b.Property<int>("LebenslaufId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LebenslaufId"));

                    b.Property<int>("BewerberId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Dokument")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("LebenslaufId")
                        .HasName("PK_BewerberDokument");

                    b.HasIndex(new[] { "BewerberId" }, "IX_Lebenslauf")
                        .IsUnique();

                    b.ToTable("Lebenslauf", (string)null);
                });

            modelBuilder.Entity("KarrierenPortal.Models.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillId"));

                    b.Property<string>("Beschreibung")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("SkillId");

                    b.ToTable("Skill", (string)null);
                });

            modelBuilder.Entity("BewerberSkill", b =>
                {
                    b.HasOne("KarrierenPortal.Models.Bewerber", null)
                        .WithMany()
                        .HasForeignKey("BewerberId")
                        .IsRequired()
                        .HasConstraintName("FK_BewerberSkill_Bewerber");

                    b.HasOne("KarrierenPortal.Models.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .IsRequired()
                        .HasConstraintName("FK_BewerberSkill_Skill");
                });

            modelBuilder.Entity("JobAngebotSkill", b =>
                {
                    b.HasOne("KarrierenPortal.Models.JobAngebot", null)
                        .WithMany()
                        .HasForeignKey("JobAngebotId")
                        .IsRequired()
                        .HasConstraintName("FK_JobAngebotSkill_JobAngebot");

                    b.HasOne("KarrierenPortal.Models.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .IsRequired()
                        .HasConstraintName("FK_JobAngebotSkill_Skill");
                });

            modelBuilder.Entity("KarrierenPortal.Models.Arbeitgeber", b =>
                {
                    b.HasOne("KarrierenPortal.Models.BetriebsGroesse", "BetriebsGroesse")
                        .WithMany("Arbeitgebers")
                        .HasForeignKey("BetriebsGroesseId")
                        .IsRequired()
                        .HasConstraintName("FK_Arbeitgeber_BetriebsGroesse");

                    b.HasOne("KarrierenPortal.Models.Branche", "Branche")
                        .WithMany("Arbeitgebers")
                        .HasForeignKey("BrancheId")
                        .IsRequired()
                        .HasConstraintName("FK_Arbeitgeber_Branche");

                    b.HasOne("KarrierenPortal.Models.Land", "LandCodeNavigation")
                        .WithMany("Arbeitgebers")
                        .HasForeignKey("LandCode")
                        .IsRequired()
                        .HasConstraintName("FK_Arbeitgeber_Land");

                    b.Navigation("BetriebsGroesse");

                    b.Navigation("Branche");

                    b.Navigation("LandCodeNavigation");
                });

            modelBuilder.Entity("KarrierenPortal.Models.ArbeitgeberBenefit", b =>
                {
                    b.HasOne("KarrierenPortal.Models.Arbeitgeber", "Arbeitgeber")
                        .WithMany("ArbeitgeberBenefits")
                        .HasForeignKey("ArbeitgeberId")
                        .IsRequired()
                        .HasConstraintName("FK_ArbeitgeberBenefit_Arbeitgeber");

                    b.HasOne("KarrierenPortal.Models.Benefit", "BenefitNavigation")
                        .WithMany("ArbeitgeberBenefits")
                        .HasForeignKey("BenefitId")
                        .IsRequired()
                        .HasConstraintName("FK_ArbeitgeberBenefit_Benefit");

                    b.Navigation("Arbeitgeber");

                    b.Navigation("BenefitNavigation");
                });

            modelBuilder.Entity("KarrierenPortal.Models.Benachrichtigung", b =>
                {
                    b.HasOne("KarrierenPortal.Models.Bewerber", "Bewerber")
                        .WithMany("Benachrichtigungs")
                        .HasForeignKey("BewerberId")
                        .IsRequired()
                        .HasConstraintName("FK_Benachrichtigung_Bewerber");

                    b.Navigation("Bewerber");
                });

            modelBuilder.Entity("KarrierenPortal.Models.Bewerber", b =>
                {
                    b.HasOne("KarrierenPortal.Models.Land", "LandCodeNavigation")
                        .WithMany("Bewerbers")
                        .HasForeignKey("LandCode")
                        .IsRequired()
                        .HasConstraintName("FK_Bewerber_Land");

                    b.Navigation("LandCodeNavigation");
                });

            modelBuilder.Entity("KarrierenPortal.Models.Bewerbung", b =>
                {
                    b.HasOne("KarrierenPortal.Models.Bewerber", "BewerbungNavigation")
                        .WithOne("Bewerbung")
                        .HasForeignKey("KarrierenPortal.Models.Bewerbung", "BewerbungId")
                        .IsRequired()
                        .HasConstraintName("FK_Bewerbung_Bewerber1");

                    b.HasOne("KarrierenPortal.Models.BewerbungStatus", "BewerbungStatus")
                        .WithMany("Bewerbungs")
                        .HasForeignKey("BewerbungStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Bewerbung_Bewerber");

                    b.HasOne("KarrierenPortal.Models.JobAngebot", "JobAngebot")
                        .WithMany("Bewerbungs")
                        .HasForeignKey("JobAngebotId")
                        .IsRequired()
                        .HasConstraintName("FK_Bewerbung_JobAngebot");

                    b.Navigation("BewerbungNavigation");

                    b.Navigation("BewerbungStatus");

                    b.Navigation("JobAngebot");
                });

            modelBuilder.Entity("KarrierenPortal.Models.JobAngebot", b =>
                {
                    b.HasOne("KarrierenPortal.Models.Arbeitgeber", "Arbeitgeber")
                        .WithMany("JobAngebots")
                        .HasForeignKey("ArbeitgeberId")
                        .IsRequired()
                        .HasConstraintName("FK_JobAngebot_Arbeitgeber");

                    b.HasOne("KarrierenPortal.Models.Arbeitsort", "Arbeitsort")
                        .WithMany("JobAngebots")
                        .HasForeignKey("ArbeitsortId")
                        .HasConstraintName("FK_JobAngebot_Arbeitsort");

                    b.HasOne("KarrierenPortal.Models.Arbeitszeitmodell", "Arbeitszeitmodell")
                        .WithMany("JobAngebots")
                        .HasForeignKey("ArbeitszeitmodellId")
                        .HasConstraintName("FK_JobAngebot_Arbeitszeitmodell");

                    b.HasOne("KarrierenPortal.Models.GehaltsSpanne", "GehaltsSpanne")
                        .WithMany("JobAngebots")
                        .HasForeignKey("GehaltsSpanneId")
                        .HasConstraintName("FK_JobAngebot_GehaltsSpanne");

                    b.Navigation("Arbeitgeber");

                    b.Navigation("Arbeitsort");

                    b.Navigation("Arbeitszeitmodell");

                    b.Navigation("GehaltsSpanne");
                });

            modelBuilder.Entity("KarrierenPortal.Models.Lebenslauf", b =>
                {
                    b.HasOne("KarrierenPortal.Models.Bewerber", "Bewerber")
                        .WithOne("Lebenslauf")
                        .HasForeignKey("KarrierenPortal.Models.Lebenslauf", "BewerberId")
                        .IsRequired()
                        .HasConstraintName("FK_Lebenslauf_Bewerber");

                    b.Navigation("Bewerber");
                });

            modelBuilder.Entity("KarrierenPortal.Models.Arbeitgeber", b =>
                {
                    b.Navigation("ArbeitgeberBenefits");

                    b.Navigation("JobAngebots");
                });

            modelBuilder.Entity("KarrierenPortal.Models.Arbeitsort", b =>
                {
                    b.Navigation("JobAngebots");
                });

            modelBuilder.Entity("KarrierenPortal.Models.Arbeitszeitmodell", b =>
                {
                    b.Navigation("JobAngebots");
                });

            modelBuilder.Entity("KarrierenPortal.Models.Benefit", b =>
                {
                    b.Navigation("ArbeitgeberBenefits");
                });

            modelBuilder.Entity("KarrierenPortal.Models.BetriebsGroesse", b =>
                {
                    b.Navigation("Arbeitgebers");
                });

            modelBuilder.Entity("KarrierenPortal.Models.Bewerber", b =>
                {
                    b.Navigation("Benachrichtigungs");

                    b.Navigation("Bewerbung");

                    b.Navigation("Lebenslauf");
                });

            modelBuilder.Entity("KarrierenPortal.Models.BewerbungStatus", b =>
                {
                    b.Navigation("Bewerbungs");
                });

            modelBuilder.Entity("KarrierenPortal.Models.Branche", b =>
                {
                    b.Navigation("Arbeitgebers");
                });

            modelBuilder.Entity("KarrierenPortal.Models.GehaltsSpanne", b =>
                {
                    b.Navigation("JobAngebots");
                });

            modelBuilder.Entity("KarrierenPortal.Models.JobAngebot", b =>
                {
                    b.Navigation("Bewerbungs");
                });

            modelBuilder.Entity("KarrierenPortal.Models.Land", b =>
                {
                    b.Navigation("Arbeitgebers");

                    b.Navigation("Bewerbers");
                });
#pragma warning restore 612, 618
        }
    }
}
